#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure for tree node
struct Node {
    char ch;
    int freq;
    struct Node *left, *right;
};

// Queue structure for level-order insertion
struct Queue {
    struct Node* data[100];
    int front, rear;
};

// Initialize Queue
void initQueue(struct Queue* q) {
    q->front = q->rear = -1;
}

// Check if queue is empty
int isEmpty(struct Queue* q) {
    return q->front == -1;
}

// Enqueue a node
void enqueue(struct Queue* q, struct Node* node) {
    if (q->rear == 99)
        return;
    if (q->front == -1)
        q->front = 0;
    q->data[++q->rear] = node;
}

// Dequeue a node
struct Node* dequeue(struct Queue* q) {
    if (isEmpty(q))
        return NULL;
    struct Node* temp = q->data[q->front];
    if (q->front == q->rear)
        q->front = q->rear = -1;
    else
        q->front++;
    return temp;
}

// Create new node
struct Node* createNode(char ch) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->ch = ch;
    newNode->freq = 1;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Check if character already exists in tree â€” if yes, increment frequency
int incrementIfExists(struct Node* root, char ch) {
    if (root == NULL)
        return 0;

    struct Queue q;
    initQueue(&q);
    enqueue(&q, root);

    while (!isEmpty(&q)) {
        struct Node* curr = dequeue(&q);
        if (curr->ch == ch) {
            curr->freq++;
            return 1;
        }
        if (curr->left)
            enqueue(&q, curr->left);
        if (curr->right)
            enqueue(&q, curr->right);
    }
    return 0;
}

// Insert new character in level order
void insertLevelWise(struct Node** root, char ch) {
    if (*root == NULL) {
        *root = createNode(ch);
        return;
    }

    // If exists, increment frequency and stop
    if (incrementIfExists(*root, ch))
        return;

    // Otherwise, insert at first empty position (level order)
    struct Queue q;
    initQueue(&q);
    enqueue(&q, *root);

    while (!isEmpty(&q)) {
        struct Node* temp = dequeue(&q);

        if (temp->left == NULL) {
            temp->left = createNode(ch);
            return;
        } else {
            enqueue(&q, temp->left);
        }

        if (temp->right == NULL) {
            temp->right = createNode(ch);
            return;
        } else {
            enqueue(&q, temp->right);
        }
    }
}

// Print tree in level order (character, frequency)
void printLevelOrder(struct Node* root) {
    if (root == NULL)
        return;

    struct Queue q;
    initQueue(&q);
    enqueue(&q, root);

    printf("\nLevel Order Traversal (char, freq):\n");

    while (!isEmpty(&q)) {
        struct Node* curr = dequeue(&q);
        printf("(%c,%d) ", curr->ch, curr->freq);
        if (curr->left)
            enqueue(&q, curr->left);
        if (curr->right)
            enqueue(&q, curr->right);
    }
    printf("\n");
}

// Main
int main() {
    char str[100];
    printf("Enter the string: ");
    scanf("%s", str);

    struct Node* root = NULL;

    for (int i = 0; i < strlen(str); i++)
        insertLevelWise(&root, str[i]);

    printLevelOrder(root);
    return 0;
}

